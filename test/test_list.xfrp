module List
in
  a : Int
out 
  o : [(Int, Int)]
use Std

fun assoc_incr(target, list, found) = case target of
  (word, n) -> 
    case list of
      [] -> if found then [] else [(word, n)];
      (x, y) :: xs ->
        if x == word then
          (x, y + n) :: assoc_incr(target, xs, True)
        else
          (x, y) :: assoc_incr(target, xs, found);
  ;

node map = (a, 1)

node init[[]] o = assoc_incr(map, o@last, False)